{"version":3,"sources":["serviceWorker.js","index.js","Web3.js","Storehash.js","App.js","Ipfs.js"],"names":["isLocalhost","Boolean","window","location","hostname","match","registerValidSW","swUrl","config","navigator","serviceWorker","register","then","registration","onupdatefound","installingWorker","installing","onstatechange","state","controller","console","log","onUpdate","onSuccess","catch","error","ReactDOM","render","App","document","getElementById","URL","process","href","origin","addEventListener","fetch","response","contentType","headers","get","status","indexOf","ready","unregister","reload","checkValidServiceWorker","web3","Web3","currentProvider","eth","Contract","ipfsHash","buffer","ethAddress","transactionHash","txReceipt","captureFile","event","stopPropagation","preventDefault","file","target","files","reader","FileReader","readAsArrayBuffer","onloadend","convertToBuffer","a","Buffer","from","result","setState","onClick","blockNumber","gasUsed","getTransactionReceipt","err","onSubmit","getAccounts","accounts","storehash","options","address","ipfs","add","hash","methods","setHash","send","basename","className","this","type","onChange","bsStyle","bordered","responsive","Component","require","host","port","protocol"],"mappings":"8JAYMA,EAAcC,QACW,cAA7BC,OAAOC,SAASC,UAEe,UAA7BF,OAAOC,SAASC,UAEhBF,OAAOC,SAASC,SAASC,MACvB,2DAsCN,SAASC,EAAgBC,EAAOC,GAC9BC,UAAUC,cACPC,SAASJ,GACTK,MAAK,SAAAC,GACJA,EAAaC,cAAgB,WAC3B,IAAMC,EAAmBF,EAAaG,WACd,MAApBD,IAGJA,EAAiBE,cAAgB,WACA,cAA3BF,EAAiBG,QACfT,UAAUC,cAAcS,YAI1BC,QAAQC,IACN,iHAKEb,GAAUA,EAAOc,UACnBd,EAAOc,SAAST,KAMlBO,QAAQC,IAAI,sCAGRb,GAAUA,EAAOe,WACnBf,EAAOe,UAAUV,WAO5BW,OAAM,SAAAC,GACLL,QAAQK,MAAM,4CAA6CA,M,QCzFjEC,IAASC,OAAO,kBAACC,EAAA,EAAD,MAASC,SAASC,eAAe,SDe1C,SAAkBtB,GACvB,GAA6C,kBAAmBC,UAAW,CAGzE,GADkB,IAAIsB,IAAIC,qBAAwB9B,OAAOC,SAAS8B,MACpDC,SAAWhC,OAAOC,SAAS+B,OAIvC,OAGFhC,OAAOiC,iBAAiB,QAAQ,WAC9B,IAAM5B,EAAK,UAAMyB,qBAAN,sBAEPhC,IAgEV,SAAiCO,EAAOC,GAEtC4B,MAAM7B,GACHK,MAAK,SAAAyB,GAEJ,IAAMC,EAAcD,EAASE,QAAQC,IAAI,gBAEnB,MAApBH,EAASI,QACO,MAAfH,IAA8D,IAAvCA,EAAYI,QAAQ,cAG5CjC,UAAUC,cAAciC,MAAM/B,MAAK,SAAAC,GACjCA,EAAa+B,aAAahC,MAAK,WAC7BV,OAAOC,SAAS0C,eAKpBvC,EAAgBC,EAAOC,MAG1BgB,OAAM,WACLJ,QAAQC,IACN,oEArFAyB,CAAwBvC,EAAOC,GAI/BC,UAAUC,cAAciC,MAAM/B,MAAK,WACjCQ,QAAQC,IACN,iHAMJf,EAAgBC,EAAOC,OCtC/BE,I,iCCZA,aACMqC,EAAO,IADb,OACiBC,GAAK9C,OAAO6C,KAAKE,iBACnBF,O,qDCFf,aAsCe,QAAIA,IAAKG,IAAIC,SA/BxB,CACI,CACI,UAAY,EACZ,OAAU,CACN,CACI,KAAQ,IACR,KAAQ,WAGhB,KAAQ,UACR,QAAW,GACX,SAAW,EACX,gBAAmB,aACnB,KAAQ,YAEZ,CACI,UAAY,EACZ,OAAU,GACV,KAAQ,UACR,QAAW,CACP,CACI,KAAQ,IACR,KAAQ,WAGhB,SAAW,EACX,gBAAmB,OACnB,KAAQ,aA/BJ,+C,uOCKVvB,E,2MACJV,MAAQ,CACNkC,SAAU,KACVC,OAAQ,GACRC,WAAY,GACZC,gBAAiB,GACjBC,UAAW,I,EAIbC,YAAc,SAACC,GACbA,EAAMC,kBACND,EAAME,iBACN,IAAMC,EAAOH,EAAMI,OAAOC,MAAM,GAC5BC,EAAS,IAAI9D,OAAO+D,WACxBD,EAAOE,kBAAkBL,GACzBG,EAAOG,UAAY,kBAAM,EAAKC,gBAAgBJ,K,EAIhDI,gB,uCAAkB,WAAOJ,GAAP,eAAAK,EAAA,sEAEKC,EAAOC,KAAKP,EAAOQ,QAFxB,OAEVnB,EAFU,OAIhB,EAAKoB,SAAS,CAAEpB,WAJA,2C,wDAQlBqB,Q,sBAAU,sBAAAL,EAAA,sEAEN,EAAKI,SAAS,CAAEE,YAAa,cAC7B,EAAKF,SAAS,CAAEG,QAAS,eAHnB,SAIA7B,IAAKG,IAAI2B,sBAAsB,EAAK3D,MAAMqC,iBAAiB,SAACuB,EAAKtB,GACrEpC,QAAQC,IAAIyD,EAAKtB,GACjB,EAAKiB,SAAS,CAAEjB,iBANZ,uDASNpC,QAAQC,IAAR,MATM,yD,EAaV0D,S,uCAAW,WAAOrB,GAAP,iBAAAW,EAAA,6DACTX,EAAME,iBADG,SAIcb,IAAKG,IAAI8B,cAJvB,cAIHC,EAJG,gBAOgBC,IAAUC,QAAQC,QAPlC,cAOH9B,EAPG,OAQT,EAAKmB,SAAS,CAAEnB,eARP,UAUH+B,IAAKC,IAAI,EAAKpE,MAAMmC,QAAQ,SAACyB,EAAK1B,GACtChC,QAAQC,IAAIyD,EAAK1B,GAEjB,EAAKqB,SAAS,CAAErB,SAAUA,EAAS,GAAGmC,OAGtCL,IAAUM,QAAQC,QAAQ,EAAKvE,MAAMkC,UAAUsC,KAAK,CAClDnB,KAAMU,EAAS,KACd,SAACxD,EAAO8B,GACTnC,QAAQC,IAAIkC,GACZ,EAAKkB,SAAS,CAAElB,0BApBX,4C,8HA0BT,OACE,kBAAC,IAAD,CAAYoC,SAAS,KACnB,yBAAKC,UAAU,OACb,4BAAQA,UAAU,cAChB,uDAGF,6BACA,8BACE,6DACA,0BAAMb,SAAUc,KAAKd,UACnB,2BAAOe,KAAK,OAAOC,SAAUF,KAAKpC,cAClC,kBAAC,IAAD,CAAQuC,QAAQ,UAAUF,KAAK,UAA/B,+BAEF,6BACA,kBAAC,IAAD,CAAQpB,QAASmB,KAAKnB,SAAtB,6BACA,6BACA,2BAAOuB,UAAQ,EAACC,YAAU,GACxB,+BACE,4BACE,mDACA,iCACA,wCAGJ,+BACE,4BACE,4DACA,mCACA,4BAAKL,KAAK3E,MAAMkC,WAElB,4BACE,yDACA,mCACA,4BAAKyC,KAAK3E,MAAMoC,aAElB,4BACE,qCACA,mCACA,4BAAKuC,KAAK3E,MAAMqC,2B,GA1GhB4C,aAoHHvE,Q,yDC5Hf,IACMyD,EAAO,IADAe,EAAQ,KACR,CAAS,CAAEC,KAAM,iBAAkBC,KAAM,KAAMC,SAAU,UACvDlB,O","file":"static/js/main.321d5838.chunk.js","sourcesContent":["// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.1/8 is considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl)\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready.then(registration => {\n      registration.unregister();\n    });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\nimport 'bootstrap/dist/css/bootstrap.min.css';\n\nReactDOM.render(<App />, document.getElementById('root'));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.register();\n","import Web3 from 'web3';\r\nconst web3 = new Web3(window.web3.currentProvider);\r\nexport default web3","import web3 from './Web3'\r\n\r\n//Your contract address\r\nconst address = '0xc78e0e767c2d1bdba65412f95c245b254e49cfc0';\r\n\r\n//Your contract ABI\r\nconst abi =\r\n    [\r\n        {\r\n            \"constant\": false,\r\n            \"inputs\": [\r\n                {\r\n                    \"name\": \"x\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"name\": \"setHash\",\r\n            \"outputs\": [],\r\n            \"payable\": false,\r\n            \"stateMutability\": \"nonpayable\",\r\n            \"type\": \"function\"\r\n        },\r\n        {\r\n            \"constant\": true,\r\n            \"inputs\": [],\r\n            \"name\": \"getHash\",\r\n            \"outputs\": [\r\n                {\r\n                    \"name\": \"x\",\r\n                    \"type\": \"string\"\r\n                }\r\n            ],\r\n            \"payable\": false,\r\n            \"stateMutability\": \"view\",\r\n            \"type\": \"function\"\r\n        }\r\n    ]\r\n\r\nexport default new web3.eth.Contract(abi, address);\r\n","import React, { Component } from 'react';\nimport { HashRouter, Route, Link } from \"react-router-dom\";\nimport './App.css';\nimport web3 from './Web3';\nimport ipfs from './Ipfs';\nimport storehash from './Storehash';\nimport { Button } from 'reactstrap';\n\nclass App extends Component {\n  state = {\n    ipfsHash: null,\n    buffer: '',\n    ethAddress: '',\n    transactionHash: '',\n    txReceipt: ''\n  };\n\n  //Take file input from user\n  captureFile = (event) => {\n    event.stopPropagation()\n    event.preventDefault()\n    const file = event.target.files[0]\n    let reader = new window.FileReader()\n    reader.readAsArrayBuffer(file)\n    reader.onloadend = () => this.convertToBuffer(reader)\n  };\n\n  //Convert the file to buffer to store on IPFS \n  convertToBuffer = async (reader) => {\n    //file is converted to a buffer for upload to IPFS        \n    const buffer = await Buffer.from(reader.result);\n    //set this buffer-using es6 syntax        \n    this.setState({ buffer });\n  };\n\n  //ES6 async function\n  onClick = async () => {\n    try {\n      this.setState({ blockNumber: \"waiting..\" });\n      this.setState({ gasUsed: \"waiting...\" });\n      await web3.eth.getTransactionReceipt(this.state.transactionHash, (err, txReceipt) => {\n        console.log(err, txReceipt);\n        this.setState({ txReceipt });\n      });\n    } catch (error) {\n      console.log(error);\n    }\n  }\n\n  onSubmit = async (event) => {\n    event.preventDefault();\n\n    //bring in user's metamask account address     \n    const accounts = await web3.eth.getAccounts();\n\n    //obtain contract address from storehash.js      \n    const ethAddress = await storehash.options.address;\n    this.setState({ ethAddress });\n    //save document to IPFS,return its hash#, and set hash# to state      \n    await ipfs.add(this.state.buffer, (err, ipfsHash) => {\n      console.log(err, ipfsHash);\n      //setState by setting ipfsHash to ipfsHash[0].hash        \n      this.setState({ ipfsHash: ipfsHash[0].hash });\n      // call Ethereum contract method \"sendHash\" and .send IPFS hash to ethereum contract        \n      //return the transaction hash from the ethereum contract        \n      storehash.methods.setHash(this.state.ipfsHash).send({\n        from: accounts[0]\n      }, (error, transactionHash) => {\n        console.log(transactionHash);\n        this.setState({ transactionHash });\n      });\n    })\n  };\n\n  render() {\n    return (\n      <HashRouter basename='/'>\n        <div className=\"App\">\n          <header className=\"App-header\">\n            <h1>Lilly Picture Contest!</h1>\n          </header>\n\n          <hr />\n          <grid>\n            <h3> Choose file to send to IPFS </h3>\n            <form onSubmit={this.onSubmit}>\n              <input type=\"file\" onChange={this.captureFile} />\n              <Button bsStyle=\"primary\" type=\"submit\">      Send it             </Button>\n            </form>\n            <hr />\n            <Button onClick={this.onClick}> Get Transaction Receipt </Button>\n            <hr />\n            <table bordered responsive>\n              <thead>\n                <tr>\n                  <th>Tx Receipt Category</th>\n                  <th> </th>\n                  <th>Values</th>\n                </tr>\n              </thead>\n              <tbody>\n                <tr>\n                  <td>IPFS Hash stored on Ethereum</td>\n                  <td> : </td>\n                  <td>{this.state.ipfsHash}</td>\n                </tr>\n                <tr>\n                  <td>Ethereum Contract Address</td>\n                  <td> : </td>\n                  <td>{this.state.ethAddress}</td>\n                </tr>\n                <tr>\n                  <td>Tx # </td>\n                  <td> : </td>\n                  <td>{this.state.transactionHash}</td>\n                </tr>\n              </tbody>\n            </table>\n          </grid>\n        </div>\n      </HashRouter>);\n  }\n}\n\nexport default App;\n","const IPFS = require('ipfs-api');\r\nconst ipfs = new IPFS({ host: 'ipfs.infura.io', port: 5001, protocol: 'https' });\r\nexport default ipfs;"],"sourceRoot":""}